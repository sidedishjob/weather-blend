Next.js の原則

1. コア原則
   • App Router を標準採用
   • TypeScript 必須（ESLint／型エラーは常にゼロ）
   • API Routes は使用しない。あらゆるサーバー処理は Server Actions で実装

2. ディレクトリレイアウト

app/ ルーティング & ページ  
components/ 汎用 UI（再利用可能・ロジックなし）  
lib/ ユーティリティ関数  
hooks/ カスタムフック  
types/ 型定義  
constants/ 定数  
config/ 設定値・環境変数ラッパー  
services/ 外部 API ラッパーやビジネスロジック  
demo/ フロントエンドから実行できる手動テストページ

    •	専用（機能固有）コンポーネント … 対応する page.tsx と同階層
    •	汎用（再利用可能）コンポーネント … components/ に配置

3. データハンドリング

依存条件 実装方法
ユーザー操作に依存しない server components + Server Actions
ユーザー操作に依存する client components + Server Actions + useSWR

    •	更新は Server Actions、即時反映は useSWR.mutate で楽観的更新
    •	Supabase は RLS + auth.uid() を利用し、user.id 明示は不要

4. 表示と状態管理
   • UI は極力自作せず、必ず shadcn/ui のコンポーネントを利用
   • アイコンは lucide-react を統一使用
   • URL 状態は nuqs に統一
   • グローバル状態ライブラリは 使用しない（必要時は React Context + useReducer などで最小構成）

5. パフォーマンス
   • use client / useEffect / useState は最小限、まず RSC
   • クライアント側は Suspense でフォールバック
   • 動的 import で遅延読み込み、画像は next/image、リンクは next/link
   • ルートベースのコード分割を徹底

6. フォームとバリデーション
   • 制御コンポーネント + react-hook-form
   • スキーマ検証は Zod
   • クライアント／サーバー両方で入力チェック

7. 品質・セキュリティ・テスト

7-1 エラーハンドリング
• ガード節で 早期 return、成功パスは最後にまとめる

7-2 アクセシビリティ
• セマンティック HTML + ARIA、キーボード操作サポート

7-3 Server Actions のセキュリティ指針
• ユーザーが許可された操作だけを Server Action として実装
• 汎用的・多目的なサーバー関数は実装しない
• RLS と auth.uid() により 最小権限 を担保

7-4 テスト
• demo/ ディレクトリ に UI ベースのテストページを配置し、
すべての Server Actions・クライアント関数を ブラウザ経由で手動検証 できるようにする

⸻

実装フロー 1. 設計：コア原則とディレクトリ決定 2. データ：取得（useSWR）・更新（Server Actions ＋ mutate）ルール確立 3. UI / State：shadcn/ui と lucide-react を使い、URL 状態は nuqs 4. パフォーマンス：RSC・Suspense・dynamic import で最適化 5. フォーム & バリデーション：Zod × react-hook-form 6. 品質管理：エラー処理 → アクセシビリティ → 専用 Server Actions → demo/ で手動テスト
